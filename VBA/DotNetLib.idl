// Generated .IDL file (by OleWoo)
[
  uuid(65e9265f-0806-492d-8e05-72dbff7d85c6),
  version(1.0),
  custom(90883f05-3d28-11d2-8f17-00a0c9a6186d, "DotNetLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f04dec4eb2d9cf42"),
  helpstring("COM wrapper of the .Net Framework 4.8.1")
]
library DotNetLib
{
	// Forward declare all types defined in this typelib
	dispinterface IDateTime
	interface IDateTime
	dispinterface IDateTimeOffset
	interface IDateTimeOffset
	dispinterface ITimeSpan
	interface ITimeSpan
	dispinterface ITimeZoneInfo
	interface ITimeZoneInfo
	dispinterface IList
	interface IList
	dispinterface IListString
	interface IListString
	dispinterface IReadOnlyCollection
	interface IReadOnlyCollection
	dispinterface _ReadOnlyCollection
	interface _ReadOnlyCollection
	[
	  uuid(72e3ab6f-9742-4f2f-8fa2-43feeb1cc788),
	  helpstring("Represents an instant in time, typically expressed as a date and time of day.")
	]
	coclass DateTime {
		interface _Object;
		[default] interface IDateTime;
	};
	
	[
	  uuid(27660912-6101-4779-b4e0-24f2b164b334),
	  helpstring("Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).")
	]
	coclass DateTimeOffset {
		interface _Object;
		[default] interface IDateTimeOffset;
	};
	
	[
	  uuid(fc2ead4c-e155-4a9b-989a-a6d93baf4738),
	  dual,
	  oleautomation
	]
	interface IDateTime : IDispatch {
		[id(0x60020000), helpstring("Initializes a new instance of the DateTime structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.")] 
		HRESULT CreateFromTicks(
			[in] int64 ticks,
			[in, optional, defaultvalue(0)] DateTimeKind kind,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020001), helpstring("Initializes a new instance of the DateTime structure to the specified year, month, and day.")] 
		HRESULT CreateFromDate(
			[in] long year,
			[in] long month,
			[in] long day,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020002), helpstring("Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, and millisecond.")] 
		HRESULT CreateFromDateTime(
			[in] long year,
			[in] long month,
			[in] long day,
			[in] long hour,
			[in] long minute,
			[in] long second,
			[in, optional, defaultvalue(0)] long millisecond,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020003), helpstring("Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.")] 
		HRESULT CreateFromDateTimeKind(
			[in] long year,
			[in] long month,
			[in] long day,
			[in] long hour,
			[in] long minute,
			[in] long second,
			[in] long millisecond,
			[in] DateTimeKind kind,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020004), propget] 
		HRESULT MaxValue([out, retval] IDateTime** pRetVal);
		[id(0x60020005), propget] 
		HRESULT MinValue([out, retval] IDateTime** pRetVal);
		[id(0x60020006), propget] 
		HRESULT Date([out, retval] IDateTime** pRetVal);
		[id(0x60020007), propget] 
		HRESULT day([out, retval] long* pRetVal);
		[id(0x60020008), propget] 
		HRESULT DayOfWeek([out, retval] DayOfWeek* pRetVal);
		[id(0x60020009), propget] 
		HRESULT DayOfYear([out, retval] long* pRetVal);
		[id(0x6002000a), propget] 
		HRESULT hour([out, retval] long* pRetVal);
		[id(0x6002000b), propget] 
		HRESULT kind([out, retval] DateTimeKind* pRetVal);
		[id(0x6002000c), propget] 
		HRESULT millisecond([out, retval] long* pRetVal);
		[id(0x6002000d), propget] 
		HRESULT minute([out, retval] long* pRetVal);
		[id(0x6002000e), propget] 
		HRESULT month([out, retval] long* pRetVal);
		[id(0x6002000f), propget] 
		HRESULT Now([out, retval] IDateTime** pRetVal);
		[id(0x60020010), propget] 
		HRESULT second([out, retval] long* pRetVal);
		[id(0x60020011), propget] 
		HRESULT ticks([out, retval] int64* pRetVal);
		[id(0x60020012), propget] 
		HRESULT TimeOfDay([out, retval] ITimeSpan** pRetVal);
		[id(0x60020013), propget] 
		HRESULT Today([out, retval] IDateTime** pRetVal);
		[id(0x60020014), propget] 
		HRESULT UtcNow([out, retval] IDateTime** pRetVal);
		[id(0x60020015), propget] 
		HRESULT year([out, retval] long* pRetVal);
		[id(0x60020016), helpstring("Returns a new DateTime that adds the value of the specified TimeSpan to the value of this instance.")] 
		HRESULT Add(
			[in] ITimeSpan* value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020017), helpstring("Returns a new DateTime that adds the specified number of days to the value of this instance.")] 
		HRESULT AddDays(
			[in] double value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020018), helpstring("Returns a new DateTime that adds the specified number of hours to the value of this instance.")] 
		HRESULT AddHours(
			[in] double value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020019), helpstring("Returns a new DateTime that adds the specified number of milliseconds to the value of this instance.")] 
		HRESULT AddMilliseconds(
			[in] double value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002001a), helpstring("Returns a new DateTime that adds the specified number of minutes to the value of this instance.")] 
		HRESULT AddMinutes(
			[in] double value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002001b), helpstring("Returns a new DateTime that adds the specified number of months to the value of this instance.")] 
		HRESULT AddMonths(
			[in] long months,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002001c), helpstring("Returns a new DateTime that adds the specified number of seconds to the value of this instance.")] 
		HRESULT AddSeconds(
			[in] double value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002001d), helpstring("Returns a new DateTime that adds the specified number of ticks to the value of this instance.")] 
		HRESULT AddTicks(
			[in] int64 value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002001e), helpstring("Returns a new DateTime that adds the specified number of years to the value of this instance.")] 
		HRESULT AddYears(
			[in] long value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002001f), helpstring("Compares two instances of DateTime and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.")] 
		HRESULT Compare(
			[in] IDateTime* t1,
			[in] IDateTime* t2,
			[out, retval] long* pRetVal
		);
		[id(0x60020020), helpstring("Compares the value of this instance to a specified DateTime value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified DateTime value.")] 
		HRESULT CompareTo(
			[in] IDateTime* t,
			[out, retval] long* pRetVal
		);
		[id(0x60020021), helpstring("Returns the number of days in the specified month and year.")] 
		HRESULT DaysInMonth(
			[in] long year,
			[in] long month,
			[out, retval] long* pRetVal
		);
		[id(0x60020022), helpstring("Returns a value indicating whether the value of this instance is equal to the value of the specified DateTime instance.")] 
		HRESULT Equals(
			[in] IDateTime* value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020023), helpstring("Returns a value indicating whether this instance is equal to a specified object.")] 
		HRESULT Equals2(
			[in] VARIANT value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020024), helpstring("Returns a value indicating whether two DateTime instances have the same date and time value.")] 
		HRESULT Equals3(
			[in] IDateTime* t1,
			[in] IDateTime* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020025), helpstring("Deserializes a 64-bit binary value and recreates an original serialized DateTime object.")] 
		HRESULT FromBinary(
			[in] int64 dateData,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020026), helpstring("Converts the specified Windows file time to an equivalent local time.")] 
		HRESULT FromFileTime(
			[in] int64 fileTime,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020027), helpstring("Converts the specified Windows file time to an equivalent UTC time.")] 
		HRESULT FromFileTimeUtc(
			[in] int64 fileTime,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020028), helpstring("Returns a DateTime equivalent to the specified OLE Automation Date.")] 
		HRESULT FromOADate(
			[in] double d,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020029), helpstring("Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.")] 
		HRESULT GetDateTimeFormats([out, retval] SAFEARRAY(BSTR)* pRetVal);
		[id(0x6002002a), helpstring("Returns the hash code for this instance.")] 
		HRESULT GetHashCode([out, retval] long* pRetVal);
		[id(0x6002002b), helpstring("Indicates whether this instance of DateTime is within the daylight saving time range for the current time zone.")] 
		HRESULT IsDaylightSavingTime([out, retval] VARIANT_BOOL* pRetVal);
		[id(0x6002002c), helpstring("Returns an indication whether the specified year is a leap year.")] 
		HRESULT IsLeapYear(
			[in] long year,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002002d), helpstring("Converts the string representation of a date and time to its DateTime equivalent by using the conventions of the current culture.")] 
		HRESULT Parse(
			[in] BSTR s,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002002e), helpstring("Converts the string representation of a date and time to its DateTime equivalent by using the conventions of the current culture.")] 
		HRESULT Parse2(
			[in] BSTR s,
			[in] IFormatProvider* provider,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002002f), helpstring("Defines the formatting options that customize string parsing for some date and time parsing methods.

This enumeration supports a bitwise combination of its member values.")] 
		HRESULT Parse3(
			[in] BSTR s,
			[in] IFormatProvider* provider,
			[in] DateTimeStyles styles,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020030), helpstring("Converts the specified string representation of a date and time to its DateTime equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.")] 
		HRESULT ParseExact(
			[in] BSTR s,
			[in] BSTR format,
			[in] IFormatProvider* provider,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020031), helpstring("Converts the specified string representation of a date and time to its DateTime equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.")] 
		HRESULT ParseExact2(
			[in] BSTR s,
			[in] BSTR format,
			[in] IFormatProvider* provider,
			[in] DateTimeStyles style,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020032), helpstring("Converts the specified string representation of a date and time to its DateTime equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.")] 
		HRESULT ParseExact3(
			[in] BSTR s,
			[in] SAFEARRAY(BSTR) formats,
			[in] IFormatProvider* provider,
			[in] DateTimeStyles style,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020033), helpstring("Creates a new DateTime object that has the same number of ticks as the specified DateTime, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified DateTimeKind value.")] 
		HRESULT SpecifyKind(
			[in] IDateTime* value,
			[in] DateTimeKind kind,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020034), helpstring("Returns a new DateTime that subtracts the specified duration from the value of this instance.")] 
		HRESULT Subtract(
			[in] ITimeSpan* value,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020035), helpstring("Returns a new TimeSpan that subtracts the specified date and time from the value of this instance.")] 
		HRESULT Subtract2(
			[in] IDateTime* value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020036), helpstring("Serializes the current DateTime object to a 64-bit binary value that subsequently can be used to recreate the DateTime object.")] 
		HRESULT ToBinary([out, retval] int64* pRetVal);
		[id(0x60020037), helpstring("Converts the value of the current DateTime object to a Windows file time.")] 
		HRESULT ToFileTime([out, retval] int64* pRetVal);
		[id(0x60020038), helpstring("Converts the value of the current DateTime object to a Windows file time.")] 
		HRESULT ToFileTimeUtc([out, retval] int64* pRetVal);
		[id(0x60020039), helpstring("Converts the value of the current DateTime object to local time.")] 
		HRESULT ToLocalTime([out, retval] IDateTime** pRetVal);
		[id(0x6002003a), helpstring("Converts the value of the current DateTime object to its equivalent long date string representation.")] 
		HRESULT ToLongDateString([out, retval] BSTR* pRetVal);
		[id(0x6002003b), helpstring("Converts the value of the current DateTime object to its equivalent long time string representation.")] 
		HRESULT ToLongTimeString([out, retval] BSTR* pRetVal);
		[id(0x6002003c), helpstring("Converts the value of this instance to the equivalent OLE Automation date.")] 
		HRESULT ToOADate([out, retval] double* pRetVal);
		[id(0x6002003d), helpstring("Converts the value of the current DateTime object to its equivalent short date string representation.")] 
		HRESULT ToShortDateString([out, retval] BSTR* pRetVal);
		[id(0x6002003e), helpstring("Converts the value of the current DateTime object to its equivalent short time string representation.")] 
		HRESULT ToShortTimeString([out, retval] BSTR* pRetVal);
		[id(0x6002003f), propget] 
		HRESULT ToString(
			[in, optional, defaultvalue()] BSTR format,
			[out, retval] BSTR* pRetVal
		);
		[id(0x60020040)] 
		HRESULT ToUniversalTime([out, retval] IDateTime** pRetVal);
		[id(0x60020041)] 
		HRESULT TryParse(
			[in] BSTR s,
			[out] IDateTime** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020042)] 
		HRESULT Addition(
			[in] IDateTime* d,
			[in] ITimeSpan* t,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020043)] 
		HRESULT Equality(
			[in] IDateTime* d1,
			[in] IDateTime* d2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020044)] 
		HRESULT GreaterThan(
			[in] IDateTime* t1,
			[in] IDateTime* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020045)] 
		HRESULT GreaterThanOrEqual(
			[in] IDateTime* t1,
			[in] IDateTime* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020046)] 
		HRESULT Inequality(
			[in] IDateTime* t1,
			[in] IDateTime* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020047)] 
		HRESULT LessThan(
			[in] IDateTime* t1,
			[in] IDateTime* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020048)] 
		HRESULT LessThanOrEqual(
			[in] IDateTime* t1,
			[in] IDateTime* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020049)] 
		HRESULT Subtraction(
			[in] IDateTime* d1,
			[in] IDateTime* d2,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002004a)] 
		HRESULT Subtraction2(
			[in] IDateTime* d,
			[in] ITimeSpan* t,
			[out, retval] IDateTime** pRetVal
		);
		
	};
	
	[
	  uuid(818900b7-0353-45fa-8038-1c550219fd04),
	  dual,
	  oleautomation
	]
	interface IDateTimeOffset : IDispatch {
		[id(0x60020000), helpstring("Initializes a new instance of the DateTimeOffset structure using the specified DateTime value.")] 
		HRESULT CreateFromDateTime(
			[in] IDateTime* DateTime,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020001), helpstring("Initializes a new instance of the DateTimeOffset structure using the specified DateTime value and offset.")] 
		HRESULT CreateFromDateTime2(
			[in] IDateTime* DateTime,
			[in] ITimeSpan* offset,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020002), helpstring("Initializes a new instance of the DateTimeOffset structure using the specified year, month, day, hour, minute, second, and offset.")] 
		HRESULT CreateFromDateTimeParts(
			[in] long year,
			[in] long month,
			[in] long day,
			[in] long hour,
			[in] long minute,
			[in] long second,
			[in] ITimeSpan* offset,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020003), helpstring("Initializes a new instance of the DateTimeOffset structure using the specified year, month, day, hour, minute, second, millisecond, and offset.")] 
		HRESULT CreateFromDateTimeParts2(
			[in] long year,
			[in] long month,
			[in] long day,
			[in] long hour,
			[in] long minute,
			[in] long second,
			[in] long millisecond,
			[in] ITimeSpan* offset,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020004)] 
		HRESULT CreateFromDateTimeParts3(
			[in] long year,
			[in] long month,
			[in] long day,
			[in] long hour,
			[in] long minute,
			[in] long second,
			[in] long millisecond,
			[in] _Calendar* calendar,
			[in] ITimeSpan* offset,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020005), helpstring("Initializes a new instance of the DateTimeOffset structure using the specified number of ticks and offset.")] 
		HRESULT CreateFromTicks(
			[in] int64 ticks,
			[in] ITimeSpan* offset,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020006), propget] 
		HRESULT MaxValue([out, retval] IDateTimeOffset** pRetVal);
		[id(0x60020007), propget] 
		HRESULT MinValue([out, retval] IDateTimeOffset** pRetVal);
		[id(0x60020008), propget] 
		HRESULT Date([out, retval] IDateTime** pRetVal);
		[id(0x60020009), propget] 
		HRESULT DateTime([out, retval] IDateTime** pRetVal);
		[id(0x6002000a), propget] 
		HRESULT day([out, retval] long* pRetVal);
		[id(0x6002000b), propget] 
		HRESULT DayOfWeek([out, retval] DayOfWeek* pRetVal);
		[id(0x6002000c), propget] 
		HRESULT DayOfYear([out, retval] long* pRetVal);
		[id(0x6002000d), propget] 
		HRESULT hour([out, retval] long* pRetVal);
		[id(0x6002000e), propget] 
		HRESULT LocalDateTime([out, retval] IDateTime** pRetVal);
		[id(0x6002000f), propget] 
		HRESULT millisecond([out, retval] long* pRetVal);
		[id(0x60020010), propget] 
		HRESULT minute([out, retval] long* pRetVal);
		[id(0x60020011), propget] 
		HRESULT month([out, retval] long* pRetVal);
		[id(0x60020012), propget] 
		HRESULT Now([out, retval] IDateTimeOffset** pRetVal);
		[id(0x60020013), propget] 
		HRESULT offset([out, retval] ITimeSpan** pRetVal);
		[id(0x60020014), propget] 
		HRESULT second([out, retval] long* pRetVal);
		[id(0x60020015), propget] 
		HRESULT ticks([out, retval] int64* pRetVal);
		[id(0x60020016), propget] 
		HRESULT TimeOfDay([out, retval] ITimeSpan** pRetVal);
		[id(0x60020017), propget] 
		HRESULT UtcDateTime([out, retval] IDateTime** pRetVal);
		[id(0x60020018), propget] 
		HRESULT UtcNow([out, retval] IDateTimeOffset** pRetVal);
		[id(0x60020019), propget] 
		HRESULT UtcTicks([out, retval] int64* pRetVal);
		[id(0x6002001a), propget] 
		HRESULT year([out, retval] long* pRetVal);
		[id(0x6002001b), helpstring("Returns a new DateTimeOffset object that adds a specified time interval to the value of this instance.")] 
		HRESULT Add(
			[in] ITimeSpan* TimeSpan,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002001c), helpstring("Returns a new DateTimeOffset object that adds a specified number of whole and fractional days to the value of this instance.")] 
		HRESULT AddDays(
			[in] double days,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002001d), helpstring("Returns a new DateTimeOffset object that adds a specified number of milliseconds to the value of this instance.")] 
		HRESULT AddMilliseconds(
			[in] double milliseconds,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002001e), helpstring("Returns a new DateTimeOffset object that adds a specified number of whole and fractional minutes to the value of this instance.")] 
		HRESULT AddMinutes(
			[in] double minutes,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002001f), helpstring("Returns a new DateTimeOffset object that adds a specified number of months to the value of this instance.")] 
		HRESULT AddMonths(
			[in] long months,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020020), helpstring("Returns a new DateTimeOffset object that adds a specified number of whole and fractional seconds to the value of this instance.")] 
		HRESULT AddSeconds(
			[in] double seconds,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020021), helpstring("Returns a new DateTimeOffset object that adds a specified number of ticks to the value of this instance.")] 
		HRESULT AddTicks(
			[in] int64 ticks,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020022), helpstring("Returns a new DateTimeOffset object that adds a specified number of years to the value of this instance.")] 
		HRESULT AddYears(
			[in] long years,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020023), helpstring("Compares two DateTimeOffset objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.")] 
		HRESULT Compare(
			[in] IDateTimeOffset* first,
			[in] IDateTimeOffset* second,
			[out, retval] long* pRetVal
		);
		[id(0x60020024), helpstring("Compares the current DateTimeOffset object to a specified DateTimeOffset object and indicates whether the current object is earlier than, the same as, or later than the second DateTimeOffset object.")] 
		HRESULT CompareTo(
			[in] IDateTimeOffset* other,
			[out, retval] long* pRetVal
		);
		[id(0x60020025), helpstring("Determines whether the current DateTimeOffset object represents the same point in time as a specified DateTimeOffset object.")] 
		HRESULT Equals(
			[in] IDateTimeOffset* other,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020026), helpstring("Determines whether a DateTimeOffset object represents the same point in time as a specified object.")] 
		HRESULT Equals2(
			[in] VARIANT obj,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020027), helpstring("Determines whether two specified DateTimeOffset objects represent the same point in time.")] 
		HRESULT Equals3(
			[in] IDateTimeOffset* first,
			[in] IDateTimeOffset* second,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020028), helpstring("Determines whether the current DateTimeOffset object represents the same time and has the same offset as a specified DateTimeOffset object.")] 
		HRESULT EqualsExact(
			[in] IDateTimeOffset* other,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020029), helpstring("Converts the specified Windows file time to an equivalent local time.")] 
		HRESULT FromFileTime(
			[in] int64 fileTime,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002002a), helpstring("Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a DateTimeOffset value.")] 
		HRESULT FromUnixTimeMilliseconds(
			[in] int64 milliseconds,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002002b), helpstring("Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a DateTimeOffset value.")] 
		HRESULT FromUnixTimeSeconds(
			[in] int64 seconds,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002002c), helpstring("Returns the hash code for the current DateTimeOffset object.")] 
		HRESULT GetHashCode([out, retval] long* pRetVal);
		[id(0x6002002d), helpstring("Converts the specified string representation of a date, time, and offset to its DateTimeOffset equivalent.")] 
		HRESULT Parse(
			[in] BSTR input,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002002e), helpstring("Converts the specified string representation of a date and time to its DateTimeOffset equivalent using the specified culture-specific format information.")] 
		HRESULT Parse2(
			[in] BSTR input,
			[in] IFormatProvider* formatProvider,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002002f), helpstring("Converts the specified string representation of a date and time to its DateTimeOffset equivalent using the specified culture-specific format information and formatting style.")] 
		HRESULT Parse3(
			[in] BSTR input,
			[in] IFormatProvider* formatProvider,
			[in] DateTimeStyles styles,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020030), helpstring("Converts the specified string representation of a date and time to its DateTimeOffset equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.")] 
		HRESULT ParseExact(
			[in] BSTR input,
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020031), helpstring("Converts the specified string representation of a date and time to its DateTimeOffset equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.")] 
		HRESULT ParseExact2(
			[in] BSTR input,
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[in] DateTimeStyles styles,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020032), helpstring("Converts the specified string representation of a date and time to its DateTimeOffset equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.")] 
		HRESULT ParseExact3(
			[in] BSTR input,
			[in] SAFEARRAY(BSTR) formats,
			[in] IFormatProvider* formatProvider,
			[in] DateTimeStyles styles,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020033), helpstring("Subtracts a DateTimeOffset value that represents a specific date and time from the current DateTimeOffset object.")] 
		HRESULT Subtract(
			[in] IDateTimeOffset* value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020034), helpstring("Subtracts a specified time interval from the current DateTimeOffset object.")] 
		HRESULT Subtract2(
			[in] ITimeSpan* value,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020035), helpstring("Converts the value of the current DateTimeOffset object to a Windows file time.")] 
		HRESULT ToFileTime([out, retval] int64* pRetVal);
		[id(0x60020036), helpstring("Converts the current DateTimeOffset object to a DateTimeOffset object that represents the local time.")] 
		HRESULT ToLocalTime([out, retval] IDateTimeOffset** pRetVal);
		[id(0x60020037), helpstring("Converts the value of the current DateTimeOffset object to the date and time specified by an offset value.")] 
		HRESULT ToOffset(
			[in] ITimeSpan* offset,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x00000000), propget, helpstring("Converts the value of the current DateTimeOffset object to its equivalent string representation.")] 
		HRESULT ToString([out, retval] BSTR* pRetVal);
		[id(0x60020039), helpstring("Converts the value of the current DateTimeOffset object to its equivalent string representation using the specified format.")] 
		HRESULT ToString2(
			[in] BSTR format,
			[out, retval] BSTR* pRetVal
		);
		[id(0x6002003a), helpstring("Converts the value of the current DateTimeOffset object to its equivalent string representation using the specified culture-specific formatting information.")] 
		HRESULT ToString3(
			[in] IFormatProvider* formatProvider,
			[out, retval] BSTR* pRetVal
		);
		[id(0x6002003b), helpstring("Converts the value of the current DateTimeOffset object to its equivalent string representation using the specified format and culture-specific format information.")] 
		HRESULT ToString4(
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[out, retval] BSTR* pRetVal
		);
		[id(0x6002003c), helpstring("Converts the current DateTimeOffset object to a DateTimeOffset value that represents the Coordinated Universal Time (UTC).")] 
		HRESULT ToUniversalTime([out, retval] IDateTimeOffset** pRetVal);
		[id(0x6002003d), helpstring("Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.")] 
		HRESULT ToUnixTimeMilliseconds([out, retval] int64* pRetVal);
		[id(0x6002003e), helpstring("Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.")] 
		HRESULT ToUnixTimeSeconds([out, retval] int64* pRetVal);
		[id(0x6002003f), helpstring("Tries to converts a specified string representation of a date and time to its DateTimeOffset equivalent, and returns a value that indicates whether the conversion succeeded.")] 
		HRESULT TryParse(
			[in] BSTR input,
			[out] IDateTimeOffset** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020040), helpstring("Tries to convert a specified string representation of a date and time to its DateTimeOffset equivalent, and returns a value that indicates whether the conversion succeeded.")] 
		HRESULT TryParse2(
			[in] BSTR input,
			[in] IFormatProvider* formatProvider,
			[in] DateTimeStyles styles,
			[out] IDateTimeOffset** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020041), helpstring("Converts the specified string representation of a date and time to its DateTimeOffset equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.")] 
		HRESULT TryParseExact(
			[in] BSTR input,
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[in] DateTimeStyles styles,
			[out] IDateTimeOffset** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020042), helpstring("Converts the specified string representation of a date and time to its DateTimeOffset equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.")] 
		HRESULT TryParseExact2(
			[in] BSTR input,
			[in] SAFEARRAY(BSTR) formats,
			[in] IFormatProvider* formatProvider,
			[in] DateTimeStyles styles,
			[out] IDateTimeOffset** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020043), helpstring("Adds a specified time interval to a DateTimeOffset object that has a specified date and time, and yields a DateTimeOffset object that has new a date and time.")] 
		HRESULT Addition(
			[in] IDateTimeOffset* DateTimeOffset,
			[in] ITimeSpan* TimeSpan,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020044), helpstring("Determines whether two specified DateTimeOffset objects represent the same point in time.")] 
		HRESULT Equality(
			[in] IDateTimeOffset* left,
			[in] IDateTimeOffset* right,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020045), helpstring("Determines whether one specified DateTimeOffset object is greater than (or later than) a second specified DateTimeOffset object.")] 
		HRESULT GreaterThan(
			[in] IDateTimeOffset* left,
			[in] IDateTimeOffset* right,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020046), helpstring("Determines whether one specified DateTimeOffset object is greater than or equal to a second specified DateTimeOffset object.")] 
		HRESULT GreaterThanOrEqual(
			[in] IDateTimeOffset* left,
			[in] IDateTimeOffset* right,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020047), helpstring("Defines an implicit conversion of a DateTime object to a DateTimeOffset object.")] 
		HRESULT Implicit(
			[in] IDateTime* DateTime,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x60020048), helpstring("Determines whether two specified DateTimeOffset objects refer to different points in time.")] 
		HRESULT Inequality(
			[in] IDateTimeOffset* left,
			[in] IDateTimeOffset* right,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020049), helpstring("Determines whether one specified DateTimeOffset object is less than a second specified DateTimeOffset object.")] 
		HRESULT LessThan(
			[in] IDateTimeOffset* left,
			[in] IDateTimeOffset* right,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002004a), helpstring("Determines whether one specified DateTimeOffset object is less than or equal to a second specified DateTimeOffset object.")] 
		HRESULT LessThanOrEqual(
			[in] IDateTimeOffset* left,
			[in] IDateTimeOffset* right,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002004b), helpstring("Subtracts one DateTimeOffset object from another and yields a time interval.")] 
		HRESULT Subtraction(
			[in] IDateTimeOffset* left,
			[in] IDateTimeOffset* right,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002004c), helpstring("Subtracts a specified time interval from a specified date and time, and yields a new date and time.")] 
		HRESULT Subtraction2(
			[in] IDateTimeOffset* DateTimeOffset,
			[in] ITimeSpan* TimeSpan,
			[out, retval] IDateTimeOffset** pRetVal
		);
		
	};
	
	[
	  uuid(c2f50f87-a7d4-4c32-a01b-ec750ce1b955),
	  dual,
	  oleautomation
	]
	interface ITimeSpan : IDispatch {
		[id(0x60020000), helpstring("Initializes a new instance of the TimeSpan structure to the specified number of ticks.")] 
		HRESULT CreateFromTicks(
			[in] int64 ticks,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020001), helpstring("Initializes a new instance of the TimeSpan structure to a specified number of hours, minutes, and seconds.")] 
		HRESULT Create(
			[in] long hours,
			[in] long minutes,
			[in] long seconds,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020002), helpstring("Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, and seconds.")] 
		HRESULT Create2(
			[in] long days,
			[in] long hours,
			[in] long minutes,
			[in] long seconds,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020003), helpstring("Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, seconds, and milliseconds.")] 
		HRESULT Create3(
			[in] long days,
			[in] long hours,
			[in] long minutes,
			[in] long seconds,
			[in] long milliseconds,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020004), propget] 
		HRESULT MaxValue([out, retval] ITimeSpan** pRetVal);
		[id(0x60020005), propget] 
		HRESULT MinValue([out, retval] ITimeSpan** pRetVal);
		[id(0x60020006), propget] 
		HRESULT TicksPerDay([out, retval] int64* pRetVal);
		[id(0x60020007), propget] 
		HRESULT TicksPerHour([out, retval] int64* pRetVal);
		[id(0x60020008), propget] 
		HRESULT TicksPerMillisecond([out, retval] int64* pRetVal);
		[id(0x60020009), propget] 
		HRESULT TicksPerMinute([out, retval] int64* pRetVal);
		[id(0x6002000a), propget] 
		HRESULT TicksPerSecond([out, retval] int64* pRetVal);
		[id(0x6002000b), propget] 
		HRESULT Zero([out, retval] ITimeSpan** pRetVal);
		[id(0x6002000c), propget] 
		HRESULT days([out, retval] long* pRetVal);
		[id(0x6002000d), propget] 
		HRESULT hours([out, retval] long* pRetVal);
		[id(0x6002000e), propget] 
		HRESULT milliseconds([out, retval] long* pRetVal);
		[id(0x6002000f), propget] 
		HRESULT minutes([out, retval] long* pRetVal);
		[id(0x60020010), propget] 
		HRESULT seconds([out, retval] long* pRetVal);
		[id(0x60020011), propget] 
		HRESULT ticks([out, retval] int64* pRetVal);
		[id(0x60020012), propget] 
		HRESULT TotalDays([out, retval] double* pRetVal);
		[id(0x60020013), propget] 
		HRESULT TotalHours([out, retval] double* pRetVal);
		[id(0x60020014), propget] 
		HRESULT TotalMilliseconds([out, retval] double* pRetVal);
		[id(0x60020015), propget] 
		HRESULT TotalMinutes([out, retval] double* pRetVal);
		[id(0x60020016), propget] 
		HRESULT TotalSeconds([out, retval] double* pRetVal);
		[id(0x60020017), helpstring("Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.")] 
		HRESULT Add(
			[in] ITimeSpan* ts,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020018), helpstring("Compares two TimeSpan values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.")] 
		HRESULT Compare(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] long* pRetVal
		);
		[id(0x60020019), helpstring("Compares this instance to a specified TimeSpan object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the TimeSpan object.")] 
		HRESULT CompareTo(
			[in] ITimeSpan* value,
			[out, retval] long* pRetVal
		);
		[id(0x6002001a), helpstring("Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.")] 
		HRESULT CompareTo2(
			[in] VARIANT value,
			[out, retval] long* pRetVal
		);
		[id(0x6002001b), helpstring("Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.")] 
		HRESULT Duration([out, retval] ITimeSpan** pRetVal);
		[id(0x6002001c), helpstring("Returns a value indicating whether this instance is equal to a specified TimeSpan object.")] 
		HRESULT Equals(
			[in] ITimeSpan* obj,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002001d), helpstring("Returns a value indicating whether this instance is equal to a specified object.")] 
		HRESULT Equals2(
			[in] VARIANT value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002001e), helpstring("Returns a value that indicates whether two specified instances of TimeSpan are equal.")] 
		HRESULT Equals3(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002001f), helpstring("Returns a TimeSpan that represents a specified number of days, where the specification is accurate to the nearest millisecond.")] 
		HRESULT FromDays(
			[in] double value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020020), helpstring("Returns a TimeSpan that represents a specified number of hours, where the specification is accurate to the nearest millisecond.")] 
		HRESULT FromHours(
			[in] double value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020021), helpstring("Returns a TimeSpan that represents a specified number of milliseconds.")] 
		HRESULT FromMilliseconds(
			[in] double value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020022), helpstring("Returns a TimeSpan that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.")] 
		HRESULT FromMinutes(
			[in] double value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020023), helpstring("Returns a TimeSpan that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.")] 
		HRESULT FromSeconds(
			[in] double value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020024), helpstring("Returns a TimeSpan that represents a specified time, where the specification is in units of ticks.")] 
		HRESULT FromTicks(
			[in] int64 value,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020025), helpstring("Returns a hash code for this instance.")] 
		HRESULT GetHashCode([out, retval] long* pRetVal);
		[id(0x60020026), helpstring("Returns a new TimeSpan object whose value is the negated value of this instance.")] 
		HRESULT Negate([out, retval] ITimeSpan** pRetVal);
		[id(0x60020027), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent.")] 
		HRESULT Parse(
			[in] BSTR s,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020028), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified culture-specific format information.")] 
		HRESULT Parse2(
			[in] BSTR input,
			[in] IFormatProvider* formatProvider,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020029), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.")] 
		HRESULT ParseExact(
			[in] BSTR input,
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002002a), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.")] 
		HRESULT ParseExact2(
			[in] BSTR input,
			[in] SAFEARRAY(BSTR) formats,
			[in] IFormatProvider* formatProvider,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002002b), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.")] 
		HRESULT ParseExact3(
			[in] BSTR input,
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[in] TimeSpanStyles styles,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002002c), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly")] 
		HRESULT ParseExact4(
			[in] BSTR input,
			[in] SAFEARRAY(BSTR) formats,
			[in] IFormatProvider* formatProvider,
			[in] TimeSpanStyles styles,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002002d), helpstring("Returns a new TimeSpan object whose value is the difference between the specified TimeSpan object and this instance.")] 
		HRESULT Subtract(
			[in] ITimeSpan* ts,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x00000000), propget, helpstring("Converts the value of the current TimeSpan object to its equivalent string representation.")] 
		HRESULT ToString([out, retval] BSTR* pRetVal);
		[id(0x6002002f), helpstring("Converts the value of the current TimeSpan object to its equivalent string representation by using the specified format.")] 
		HRESULT ToString2(
			[in] BSTR format,
			[out, retval] BSTR* pRetVal
		);
		[id(0x60020030), helpstring("Converts the value of the current TimeSpan object to its equivalent string representation by using the specified format and culture-specific formatting information.")] 
		HRESULT ToString3(
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[out, retval] BSTR* pRetVal
		);
		[id(0x60020031), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent and returns a value that indicates whether the conversion succeeded.")] 
		HRESULT TryParse(
			[in] BSTR s,
			[out] ITimeSpan** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020032), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.")] 
		HRESULT TryParse2(
			[in] BSTR input,
			[in] IFormatProvider* formatProvider,
			[out] ITimeSpan** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020033), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.")] 
		HRESULT TryParseExact(
			[in] BSTR input,
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[out] ITimeSpan** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020034), helpstring("Converts the specified string representation of a time interval to its TimeSpan equivalent by using the specified formats and culture-specific format information. The format of the string representation must match one of the specified formats exactly.")] 
		HRESULT TryParseExact2(
			[in] BSTR input,
			[in] SAFEARRAY(BSTR) formats,
			[in] IFormatProvider* formatProvider,
			[out] ITimeSpan** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020035), helpstring("Converts the string representation of a time interval to its TimeSpan equivalent by using the specified format, culture-specific format information and styles. The format of the string representation must match the specified format exactly.")] 
		HRESULT TryParseExact3(
			[in] BSTR input,
			[in] BSTR format,
			[in] IFormatProvider* formatProvider,
			[in] TimeSpanStyles styles,
			[out] ITimeSpan** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020036), helpstring("Converts the specified string representation of a time interval to its TimeSpan equivalent by using the specified formats, culture-specific format information and styles. The format of the string representation must match one of the specified formats exactly.")] 
		HRESULT TryParseExact4(
			[in] BSTR input,
			[in] SAFEARRAY(BSTR) formats,
			[in] IFormatProvider* formatProvider,
			[in] TimeSpanStyles styles,
			[out] ITimeSpan** result,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020037), helpstring("Adds two specified TimeSpan instances.")] 
		HRESULT Addition(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020038), helpstring("Indicates whether two TimeSpan instances are equal.")] 
		HRESULT Equality(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020039), helpstring("Indicates whether a specified TimeSpan is greater than another specified TimeSpan.")] 
		HRESULT GreaterThan(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002003a), helpstring("Indicates whether a specified TimeSpan is greater than or equal to another specified TimeSpan.")] 
		HRESULT GreaterThanOrEqual(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002003b), helpstring("Indicates whether two TimeSpan instances are not equal.")] 
		HRESULT Inequality(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002003c), helpstring("Indicates whether a specified TimeSpan is less than another specified TimeSpan.")] 
		HRESULT LessThan(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002003d), helpstring("Indicates whether a specified TimeSpan is less than or equal to another specified TimeSpan.")] 
		HRESULT LessThanOrEqual(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002003e), helpstring("Subtracts a specified TimeSpan from another specified TimeSpan.")] 
		HRESULT Subtraction(
			[in] ITimeSpan* t1,
			[in] ITimeSpan* t2,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002003f), helpstring("Returns a TimeSpan whose value is the negated value of the specified instance.")] 
		HRESULT UnaryNegation(
			[in] ITimeSpan* t,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x60020040), helpstring("Returns the specified instance of TimeSpan.")] 
		HRESULT UnaryPlus(
			[in] ITimeSpan* t,
			[out, retval] ITimeSpan** pRetVal
		);
		
	};
	
	[
	  uuid(3484fc28-42f0-4bca-a5c4-f7af3dd4d441),
	  dual,
	  oleautomation
	]
	interface ITimeZoneInfo : IDispatch {
		[id(0x60020000), propget] 
		HRESULT BaseUtcOffset([out, retval] ITimeSpan** pRetVal);
		[id(0x60020001), propget] 
		HRESULT DaylightName([out, retval] BSTR* pRetVal);
		[id(0x60020002), propget] 
		HRESULT DisplayName([out, retval] BSTR* pRetVal);
		[id(0x60020003), propget] 
		HRESULT Id([out, retval] BSTR* pRetVal);
		[id(0x60020004), propget] 
		HRESULT Local([out, retval] ITimeZoneInfo** pRetVal);
		[id(0x60020005), propget] 
		HRESULT StandardName([out, retval] BSTR* pRetVal);
		[id(0x60020006), propget] 
		HRESULT SupportsDaylightSavingTime([out, retval] VARIANT_BOOL* pRetVal);
		[id(0x60020007), propget] 
		HRESULT Utc([out, retval] ITimeZoneInfo** pRetVal);
		[id(0x60020008), helpstring("Clears cached time zone data.")] 
		HRESULT ClearCachedData();
		[id(0x60020009), helpstring("Converts a time to the time in a particular time zone.")] 
		HRESULT ConvertTime(
			[in] IDateTime* DateTime,
			[in] ITimeZoneInfo* destinationTimeZone,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002000a), helpstring("Converts a time to the time in a particular time zone.")] 
		HRESULT ConvertTime2(
			[in] IDateTimeOffset* DateTimeOffset,
			[in] ITimeZoneInfo* destinationTimeZone,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002000b), helpstring("Converts a time from one time zone to another.")] 
		HRESULT ConvertTime3(
			[in] IDateTime* DateTime,
			[in] ITimeZoneInfo* sourceTimeZone,
			[in] ITimeZoneInfo* destinationTimeZone,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002000c), helpstring("Converts a time to the time in another time zone based on the time zone's identifier.")] 
		HRESULT ConvertTimeBySystemTimeZoneId(
			[in] IDateTime* DateTime,
			[in] BSTR destinationTimeZoneId,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002000d), helpstring("Converts a time to the time in another time zone based on the time zone's identifier.")] 
		HRESULT ConvertTimeBySystemTimeZoneId2(
			[in] IDateTimeOffset* DateTimeOffset,
			[in] BSTR destinationTimeZoneId,
			[out, retval] IDateTimeOffset** pRetVal
		);
		[id(0x6002000e), helpstring("Converts a time from one time zone to another based on time zone identifiers.")] 
		HRESULT ConvertTimeBySystemTimeZoneId3(
			[in] IDateTime* DateTime,
			[in] BSTR sourceTimeZoneId,
			[in] BSTR destinationTimeZoneId,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x6002000f), helpstring("Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.")] 
		HRESULT ConvertTimeFromUtc(
			[in] IDateTime* DateTime,
			[in] ITimeZoneInfo* destinationTimeZone,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020010), helpstring("Converts the specified date and time to Coordinated Universal Time (UTC).")] 
		HRESULT ConvertTimeToUtc(
			[in] IDateTime* DateTime,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020011), helpstring("Converts the time in a specified time zone to Coordinated Universal Time (UTC).")] 
		HRESULT ConvertTimeToUtc2(
			[in] IDateTime* DateTime,
			[in] ITimeZoneInfo* sourceTimeZone,
			[out, retval] IDateTime** pRetVal
		);
		[id(0x60020012), helpstring("Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, and a standard time display name.")] 
		HRESULT CreateCustomTimeZone(
			[in] BSTR Id,
			[in] ITimeSpan* BaseUtcOffset,
			[in] BSTR DisplayName,
			[in] BSTR standardDisplayName,
			[out, retval] ITimeZoneInfo** pRetVal
		);
		[id(0x60020013), helpstring("Determines whether the current TimeZoneInfo object and another TimeZoneInfo object are equal.")] 
		HRESULT Equals(
			[in] ITimeZoneInfo* other,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020014), helpstring("Determines whether the current TimeZoneInfo object and another object are equal.")] 
		HRESULT Equals2(
			[in] VARIANT obj,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020015), helpstring("Instantiates a new TimeZoneInfo object based on its identifier.")] 
		HRESULT FindSystemTimeZoneById(
			[in] BSTR Id,
			[out, retval] ITimeZoneInfo** pRetVal
		);
		[id(0x60020016), helpstring("Deserializes a string to re-create an original serialized TimeZoneInfo object.")] 
		HRESULT FromSerializedString(
			[in] BSTR source,
			[out, retval] ITimeZoneInfo** pRetVal
		);
		[id(0x60020017), helpstring("Returns information about the possible dates and times that an ambiguous date and time can be mapped to.")] 
		HRESULT GetAmbiguousTimeOffsets(
			[in] IDateTime* DateTime,
			[out, retval] SAFEARRAY(ITimeSpan*)* pRetVal
		);
		[id(0x60020018), helpstring("Returns information about the possible dates and times that an ambiguous date and time can be mapped to.")] 
		HRESULT GetAmbiguousTimeOffsets2(
			[in] IDateTimeOffset* DateTimeOffset,
			[out, retval] SAFEARRAY(ITimeSpan*)* pRetVal
		);
		[id(0x60020019), helpstring("Serves as a hash function for hashing algorithms and data structures such as hash tables.")] 
		HRESULT GetHashCode([out, retval] long* pRetVal);
		[id(0x6002001a), helpstring("Returns a sorted collection of all the time zones about which information is available on the local system.")] 
		HRESULT GetSystemTimeZones([out, retval] _ReadOnlyCollection** pRetVal);
		[id(0x6002001b), helpstring("Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.")] 
		HRESULT GetUtcOffset(
			[in] IDateTime* DateTime,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002001c), helpstring("Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.")] 
		HRESULT GetUtcOffset2(
			[in] IDateTimeOffset* DateTimeOffset,
			[out, retval] ITimeSpan** pRetVal
		);
		[id(0x6002001d), helpstring("Indicates whether the current object and another TimeZoneInfo object have the same adjustment rules.")] 
		HRESULT HasSameRules(
			[in] ITimeZoneInfo* other,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002001e), helpstring("Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.")] 
		HRESULT IsAmbiguousTime(
			[in] IDateTime* DateTime,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002001f), helpstring("Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.")] 
		HRESULT IsAmbiguousTime2(
			[in] IDateTimeOffset* DateTimeOffset,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020020), helpstring("Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current TimeZoneInfo object.")] 
		HRESULT IsDaylightSavingTime(
			[in] IDateTime* DateTime,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020021), helpstring("Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current TimeZoneInfo object.")] 
		HRESULT IsDaylightSavingTime2(
			[in] IDateTimeOffset* DateTimeOffset,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020022), helpstring("Indicates whether a particular date and time is invalid.")] 
		HRESULT IsInvalidTime(
			[in] IDateTime* DateTime,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020023), helpstring("Converts the current TimeZoneInfo object to a serialized string.")] 
		HRESULT ToSerializedString([out, retval] BSTR* pRetVal);
		[id(0x00000000), propget] 
		HRESULT ToString([out, retval] BSTR* pRetVal);
		
	};
	
	[
	  uuid(b73dfd69-6c69-4cfc-89f2-1c344228a9d4),
	  helpstring("Represents a time interval.")
	]
	coclass TimeSpan {
		interface _Object;
		[default] interface ITimeSpan;
	};
	
	[
	  uuid(a27d393f-5f4d-4f9b-9a5c-a72d980c802a),
	  helpstring("Represents any time zone in the world.")
	]
	coclass TimeZoneInfo {
		interface _Object;
		[default] interface ITimeZoneInfo;
	};
	
	[
	  uuid(f03a9dae-af67-4c90-91c1-7eed79a37ef1),
	  helpstring("Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists."),
	  dual,
	  oleautomation
	]
	interface IList : IDispatch {
		[id(0x60020000), helpstring("Initializes a new instance of the List < T > class that is empty and has the default initial capacity.")] 
		HRESULT Create(
			[in] VARIANT listType,
			[out, retval] IList** pRetVal
		);
		[id(0x60020001), helpstring("Initializes a new instance of the List<T> class that is empty and has the specified initial capacity.")] 
		HRESULT Create2(
			[in] VARIANT listType,
			[in] long capacity,
			[out, retval] IList** pRetVal
		);
		[id(0x60020002), helpstring("Initializes a new instance of the List<T> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.")] 
		HRESULT CreateFromIEnumerable(
			[in] IEnumerable* collection,
			[out, retval] IList** pRetVal
		);
		[id(0x00000000), propget] 
		HRESULT Item(
			[in] long index,
			[out, retval] VARIANT* pRetVal
		);
		[id(0x00000000), propputref] 
		HRESULT Item(
			[in] long index,
			[in] VARIANT pRetVal
		);
		[id(0x60020005), helpstring("Adds an object to the end of the List<T>.")] 
		HRESULT Add([in] VARIANT value);
		[id(0x60020006), helpstring("Adds the elements of the specified collection to the end of the List<T>.")] 
		HRESULT AddRange([in] IEnumerable* collection);
		[id(0x60020007), helpstring("Removes all elements from the List<T>.")] 
		HRESULT Clear();
		[id(0x60020008), helpstring("Determines whether an element is in the List<T>.")] 
		HRESULT Contains(
			[in] VARIANT value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020009), helpstring("Copies the entire List<T> to a compatible one-dimensional array, starting at the beginning of the target array.")] 
		HRESULT CopyTo([in] SAFEARRAY(VARIANT) array);
		[id(0x6002000a), helpstring("Copies the entire List<T> to a compatible one-dimensional array, starting at the specified index of the target array.")] 
		HRESULT CopyTo2(
			[in] SAFEARRAY(VARIANT) array,
			[in] long arrayIndex
		);
		[id(0x6002000b), helpstring("Copies a range of elements from the List<T> to a compatible one-dimensional array, starting at the specified index of the target array.")] 
		HRESULT CopyTo3(
			[in] long index,
			[in] SAFEARRAY(VARIANT) array,
			[in] long arrayIndex,
			[in] long count
		);
		[id(0x6002000c), helpstring("Searches for the specified object and returns the zero-based index of the first occurrence within the entire List<T>.")] 
		HRESULT IndexOf(
			[in] VARIANT Item,
			[out, retval] long* pRetVal
		);
		[id(0x6002000d), helpstring("Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List<T> that extends from the specified index to the last element.")] 
		HRESULT IndexOf2(
			[in] VARIANT Item,
			[in] long index,
			[out, retval] long* pRetVal
		);
		[id(0x6002000e), helpstring("Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List<T> that starts at the specified index and contains the specified number of elements.")] 
		HRESULT IndexOf3(
			[in] VARIANT Item,
			[in] long index,
			[in] long count,
			[out, retval] long* pRetVal
		);
		[id(0x6002000f), helpstring("Inserts an element into the List<T> at the specified index.")] 
		HRESULT Insert(
			[in] long index,
			[in] VARIANT Item
		);
		[id(0x60020010), helpstring("Searches for the specified object and returns the zero-based index of the last occurrence within the entire List<T>.")] 
		HRESULT LastIndexOf(
			[in] VARIANT Item,
			[out, retval] long* pRetVal
		);
		[id(0x60020011), helpstring("Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List<T> that extends from the first element to the specified index.")] 
		HRESULT LastIndexOf2(
			[in] VARIANT Item,
			[in] long index,
			[out, retval] long* pRetVal
		);
		[id(0x60020012), helpstring("Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List<T> that contains the specified number of elements and ends at the specified index.")] 
		HRESULT LastIndexOf3(
			[in] VARIANT Item,
			[in] long index,
			[in] long count,
			[out, retval] long* pRetVal
		);
		[id(0x60020013), helpstring("Removes the first occurrence of a specific object from the IList.")] 
		HRESULT Remove(
			[in] VARIANT value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020014), helpstring("Removes the element at the specified index of the List<T>.")] 
		HRESULT RemoveAt([in] long index);
		[id(0x60020015), helpstring("Removes a range of elements from the List<T>.")] 
		HRESULT RemoveRange(
			[in] long index,
			[in] long count
		);
		[id(0x60020016), helpstring("Reverses the order of the elements in the entire List<T>.")] 
		HRESULT Reverse();
		[id(0x60020017), helpstring("Sorts the elements in the entire List<T> using the default comparer.")] 
		HRESULT Sort();
		[id(0x60020018), helpstring("Copies the elements of the List<T> to a new array.")] 
		HRESULT ToArray([out, retval] SAFEARRAY(VARIANT)* pRetVal);
		[id(0x60020019), helpstring("Sets the capacity to the actual number of elements in the List<T>, if that number is less than a threshold value.")] 
		HRESULT TrimExcess();
		
	};
	
	[
	  uuid(f4f6bbbe-2ef4-4e02-b547-1b96271b57e2),
	  helpstring("Represents a strongly typed list of strings that can be accessed by index. Provides methods to search, sort, and manipulate lists."),
	  dual,
	  oleautomation
	]
	interface IListString : IDispatch {
		[id(0x60020000), helpstring("Initializes a new instance of the List<string> class that is empty and has the default initial capacity.")] 
		HRESULT Create([out, retval] IListString** pRetVal);
		[id(0x60020001), helpstring("Initializes a new instance of the List<string> class that is empty and has the specified initial capacity.")] 
		HRESULT Create2(
			[in] long capacity,
			[out, retval] IListString** pRetVal
		);
		[id(0x60020002), helpstring("Initializes a new instance of the List<string> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.")] 
		HRESULT CreateFromIEnumerable(
			[in] IEnumerable* collection,
			[out, retval] IListString** pRetVal
		);
		[id(0x00000000), propget] 
		HRESULT Item(
			[in] long index,
			[out, retval] BSTR* pRetVal
		);
		[id(0x00000000), propput] 
		HRESULT Item(
			[in] long index,
			[in] BSTR pRetVal
		);
		[id(0x60020005), helpstring("Adds an string to the end of the List<string>.")] 
		HRESULT Add([in] BSTR value);
		[id(0x60020006), helpstring("Removes all elements from the List<string>.")] 
		HRESULT Clear();
		[id(0x60020007), helpstring("Determines whether an element is in the List<string>.")] 
		HRESULT Contains(
			[in] BSTR value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020008), helpstring("Copies the entire List<string> to a compatible one-dimensional array, starting at the beginning of the target array.")] 
		HRESULT CopyTo([in] SAFEARRAY(BSTR) array);
		[id(0x60020009), helpstring("Copies the entire List<string> to a compatible one-dimensional array, starting at the specified index of the target array.")] 
		HRESULT CopyTo2(
			[in] SAFEARRAY(BSTR) array,
			[in] long arrayIndex
		);
		[id(0x6002000a), helpstring("Copies a range of elements from the List<string> to a compatible one-dimensional array, starting at the specified index of the target array.")] 
		HRESULT CopyTo3(
			[in] long index,
			[in] SAFEARRAY(BSTR) array,
			[in] long arrayIndex,
			[in] long count
		);
		[id(0x6002000b), helpstring("Searches for the specified string and returns the zero-based index of the first occurrence within the entire List<string>.")] 
		HRESULT IndexOf(
			[in] BSTR Item,
			[out, retval] long* pRetVal
		);
		[id(0x6002000c), helpstring("Searches for the specified string and returns the zero-based index of the first occurrence within the range of elements in the List<string> that extends from the specified index to the last element.")] 
		HRESULT IndexOf2(
			[in] BSTR Item,
			[in] long index,
			[out, retval] long* pRetVal
		);
		[id(0x6002000d), helpstring("Searches for the specified string and returns the zero-based index of the first occurrence within the range of elements in the List<string> that starts at the specified index and contains the specified number of elements.")] 
		HRESULT IndexOf3(
			[in] BSTR Item,
			[in] long index,
			[in] long count,
			[out, retval] long* pRetVal
		);
		[id(0x6002000e), helpstring("Inserts an element into the List<T> at the specified index.")] 
		HRESULT Insert(
			[in] long index,
			[in] BSTR Item
		);
		[id(0x6002000f), helpstring("Searches for the specified string and returns the zero-based index of the last occurrence within the entire List<string>.")] 
		HRESULT LastIndexOf(
			[in] BSTR Item,
			[out, retval] long* pRetVal
		);
		[id(0x60020010), helpstring("Searches for the specified string and returns the zero-based index of the last occurrence within the range of elements in the List<string> that extends from the first element to the specified index.")] 
		HRESULT LastIndexOf2(
			[in] BSTR Item,
			[in] long index,
			[out, retval] long* pRetVal
		);
		[id(0x60020011), helpstring("Searches for the specified string and returns the zero-based index of the last occurrence within the range of elements in the List<string> that contains the specified number of elements and ends at the specified index.")] 
		HRESULT LastIndexOf3(
			[in] BSTR Item,
			[in] long index,
			[in] long count,
			[out, retval] long* pRetVal
		);
		[id(0x60020012), helpstring("Removes the first occurrence of a specific string from the IList.")] 
		HRESULT Remove(
			[in] BSTR value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020013), helpstring("Removes the element at the specified index of the List<string>.")] 
		HRESULT RemoveAt([in] long index);
		[id(0x60020014), helpstring("Removes a range of elements from the List<string>.")] 
		HRESULT RemoveRange(
			[in] long index,
			[in] long count
		);
		[id(0x60020015), helpstring("Reverses the order of the elements in the entire List<string>.")] 
		HRESULT Reverse();
		[id(0x60020016), helpstring("Sorts the elements in the entire List<string> using the default comparer.")] 
		HRESULT Sort();
		[id(0x60020017), helpstring("Copies the elements of the List<string> to a new array.")] 
		HRESULT ToArray([out, retval] SAFEARRAY(BSTR)* pRetVal);
		[id(0x60020018), helpstring("Sets the capacity to the actual number of elements in the List<string>, if that number is less than a threshold value.")] 
		HRESULT TrimExcess();
		
	};
	
	[
	  uuid(2bfd4f86-013c-49d1-a5a5-ad0eebd10e30),
	  dual,
	  oleautomation
	]
	interface IReadOnlyCollection : IDispatch {
		[id(0x60020000), helpstring("Initializes a new instance of the ReadOnlyCollection<T> class that is a read-only wrapper around the specified list.")] 
		HRESULT Create(
			[in] IList* List,
			[out, retval] _ReadOnlyCollection** pRetVal
		);
		[id(0x60020001), propget] 
		HRESULT count([out, retval] long* pRetVal);
		[id(0x00000000), propget] 
		HRESULT Item(
			[in] long index,
			[out, retval] VARIANT* pRetVal
		);
		[id(0x60020003), helpstring("Determines whether an element is in the ReadOnlyCollection<T>.")] 
		HRESULT Contains(
			[in] VARIANT index,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020004), helpstring("Copies the entire ReadOnlyCollection<T> to a compatible one-dimensional Array, starting at the specified index of the target array.")] 
		HRESULT CopyTo(
			[in] SAFEARRAY(VARIANT) array,
			[in] long index
		);
		[id(0xfffffffc), helpstring("Returns an enumerator that iterates through the ReadOnlyCollection<T>.")] 
		HRESULT GetEnumerator([out, retval] IEnumVARIANT** pRetVal);
		[id(0x60020006), helpstring("Searches for the specified object and returns the zero-based index of the first occurrence within the entire ReadOnlyCollection<T>.")] 
		HRESULT IndexOf(
			[in] VARIANT value,
			[out, retval] long* pRetVal
		);
		
	};
	
	[
	  uuid(c88c9749-4d9c-46d0-a463-5da93f0e1a75),
	  helpstring("Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.")
	]
	coclass List {
		interface _Object;
		[default] interface IList;
	};
	
	[
	  uuid(70ef1dd1-80fa-4276-8051-426c0fafb2fa),
	  helpstring("Represents a strongly typed list of strings that can be accessed by index. Provides methods to search, sort, and manipulate lists.")
	]
	coclass ListString {
		interface _Object;
		[default] interface IListString;
	};
	
	[
	  uuid(e4643bbe-74af-467d-8df3-06b681e93e4c),
	  helpstring("Provides the base class for a generic read-only collection.")
	]
	coclass ReadOnlyCollection {
		[default] interface _ReadOnlyCollection;
		interface _Object;
		interface ICollection;
		interface IEnumerable;
	};
	
	[
	  uuid(d5d7b6c9-d16f-3035-a6f3-16df2f68236d),
	  helpstring("Provides the base class for a generic read-only collection."),
	  hidden,
	  dual,
	  nonextensible,
	  oleautomation
	]
	interface _ReadOnlyCollection : IDispatch {
		[id(0x60020000), propget] 
		HRESULT ToString([out, retval] BSTR* pRetVal);
		[id(0x60020001)] 
		HRESULT Equals(
			[in] VARIANT obj,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x60020002)] 
		HRESULT GetHashCode([out, retval] long* pRetVal);
		[id(0x60020003)] 
		HRESULT GetType([out, retval] _Type** pRetVal);
		[id(0x60020004), propget] 
		HRESULT count([out, retval] long* pRetVal);
		[id(0xfffffffc)] 
		HRESULT GetEnumerator([out, retval] IEnumVARIANT** pRetVal);
		[id(0x60020006)] 
		HRESULT Create(
			[in] IList* sourceList,
			[out, retval] _ReadOnlyCollection** pRetVal
		);
		[id(0x00000000), propget] 
		HRESULT Item(
			[in] long index,
			[out, retval] VARIANT* pRetVal
		);
		[id(0x60020008)] 
		HRESULT IndexOf(
			[in] VARIANT value,
			[out, retval] long* pRetVal
		);
		[id(0x60020009)] 
		HRESULT Contains(
			[in] VARIANT value,
			[out, retval] VARIANT_BOOL* pRetVal
		);
		[id(0x6002000a)] 
		HRESULT CopyTo(
			[in] SAFEARRAY(VARIANT) array,
			[in] long index
		);
		[id(0x6002000b)] 
		HRESULT ToArray([out, retval] SAFEARRAY(VARIANT)* pRetVal);
		
	};
	
};

